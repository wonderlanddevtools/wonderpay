"use client";

import { useState, useEffect, useRef } from "react";
import { useSession } from "next-auth/react";
import gsapAnimations from "@/lib/animations/gsap";
import { GlowButton } from "@/components/ui/glow-button";
import { 
  ArrowDownRight, 
  ArrowUpRight, 
  DollarSign, 
  LineChart, 
  BarChart4, 
  BanknoteIcon, 
  Building, 
  RefreshCw, 
  CreditCard, 
  PlusCircle,
  Landmark as BankIcon,
  AlertCircle, 
  ExternalLink, 
  Calendar,
  Clock
} from "lucide-react";
import Link from "next/link";
import Image from "next/image";

// Financial summary interfaces
interface FinancialSummary {
  accountsPayable: number;
  accountsReceivable: number;
  cashOnHand: number;
  workingCapital: number;
  nextPaymentDue?: {
    amount: number;
    dueDate: string;
    vendor: string;
  };
  recentIncome?: {
    amount: number;
    date: string;
    client: string;
  };
}

interface BankConnection {
  id: string;
  name: string;
  accountType: string;
  accountNumber: string;
  balance: number;
  connected: boolean;
  logo?: string;
}

interface UpcomingPayment {
  id: string;
  amount: number;
  dueDate: string;
  vendor: string;
  status: 'scheduled' | 'pending' | 'due' | 'overdue';
}

interface RecentTransaction {
  id: string;
  type: 'incoming' | 'outgoing';
  amount: number;
  date: string;
  description: string;
  counterparty: string;
}

// Keeping entity interface for compatibility with existing API
interface Entity {
  id: string;
  type: string;
  email: string;
  tax_id: string;
  created_at: string;
  address: {
    country: string;
    city: string;
    postal_code: string;
    line1: string;
    state?: string;
  };
  organization?: {
    legal_name: string;
  };
  individual?: {
    first_name: string;
    last_name: string;
  };
}

interface EntityFormData {
  type: "organization" | "individual";
  email: string;
  tax_id: string;
  phone: string;
  website: string;
  address: {
    country: string;
    city: string;
    postal_code: string;
    line1: string;
    state: string;
  };
  organization?: {
    legal_name: string;
    business_structure: string;
  };
  individual?: {
    first_name: string;
    last_name: string;
  };
}

const initialFormData: EntityFormData = {
  type: "organization",
  email: "",
  tax_id: "",
  phone: "",
  website: "",
  address: {
    country: "US",
    city: "",
    postal_code: "",
    line1: "",
    state: "",
  },
  organization: {
    legal_name: "",
    business_structure: "private_corporation",
  },
};

export default function DashboardPage() {
  const { data: session } = useSession();
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [entities, setEntities] = useState<Entity[]>([]);
  
  // Entity form states
  const [showForm, setShowForm] = useState(false);
  const [formData, setFormData] = useState<EntityFormData>(initialFormData);
  const [creating, setCreating] = useState(false);
  
  // Financial data states
  const [financialSummary, setFinancialSummary] = useState<FinancialSummary>({
    accountsPayable: 0,
    accountsReceivable: 0,
    cashOnHand: 0,
    workingCapital: 0
  });
  const [bankConnections, setBankConnections] = useState<BankConnection[]>([]);
  const [upcomingPayments, setUpcomingPayments] = useState<UpcomingPayment[]>([]);
  const [recentTransactions, setRecentTransactions] = useState<RecentTransaction[]>([]);
  
  // Refs for animation targets
  const headerRef = useRef<HTMLDivElement>(null);
  const metricsRef = useRef<HTMLDivElement>(null);
  const insightsRef = useRef<HTMLDivElement>(null);
  const bankingRef = useRef<HTMLDivElement>(null);
  const formRef = useRef<HTMLDivElement>(null);
  const entityListRef = useRef<HTMLDivElement>(null);

  // Fetch entities (keeping for compatibility)
  const fetchEntities = async () => {
    try {
      const response = await fetch("/api/monite/entities");
      
      if (!response.ok) {
        throw new Error("Failed to fetch entities");
      }
      
      const data = await response.json() as { data: Entity[] };
      setEntities(data.data ?? []);
    } catch (err) {
      console.error("Error fetching entities:", err);
      // Don't set global error - this is just for backend compatibility
    }
  };

  // Fetch financial summary data
  const fetchFinancialData = async () => {
    try {
      setLoading(true);
      setError(null);
      
      // In production, this would be an API call to fetch actual financial data
      // For now, use mock data until Monite API is integrated
      
      // Mock financial summary
      setFinancialSummary({
        accountsPayable: 12650.75,
        accountsReceivable: 28750.40,
        cashOnHand: 42380.18,
        workingCapital: 58479.83,
        nextPaymentDue: {
          amount: 2850.00,
          dueDate: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000).toISOString(),
          vendor: "Office Supplies Co."
        },
        recentIncome: {
          amount: 4750.25,
          date: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString(),
          client: "Acme Industries"
        }
      });
      
      // Mock bank connections
      setBankConnections([
        {
          id: "bank-1",
          name: "Chase Business",
          accountType: "Checking",
          accountNumber: "****4567",
          balance: 38250.45,
          connected: true
        },
        {
          id: "bank-2",
          name: "American Express",
          accountType: "Credit Card",
          accountNumber: "****7890",
          balance: -3800.25,
          connected: true
        },
        {
          id: "bank-3",
          name: "Wells Fargo",
          accountType: "Savings",
          accountNumber: "****2345",
          balance: 7930.00,
          connected: true
        }
      ]);
      
      // Mock upcoming payments
      setUpcomingPayments([
        {
          id: "payment-1",
          amount: 2850.00,
          dueDate: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000).toISOString(),
          vendor: "Office Supplies Co.",
          status: "pending"
        },
        {
          id: "payment-2",
          amount: 1200.00,
          dueDate: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000).toISOString(),
          vendor: "Web Hosting Services",
          status: "scheduled"
        },
        {
          id: "payment-3",
          amount: 4500.00,
          dueDate: new Date(Date.now() + 8 * 24 * 60 * 60 * 1000).toISOString(),
          vendor: "Quarterly Rent",
          status: "scheduled"
        },
        {
          id: "payment-4",
          amount: 780.25,
          dueDate: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString(),
          vendor: "Electric Company",
          status: "due"
        }
      ]);
      
      // Mock recent transactions
      setRecentTransactions([
        {
          id: "tx-1",
          type: "incoming",
          amount: 4750.25,
          date: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString(),
          description: "Invoice #INV-2023-004",
          counterparty: "Acme Industries"
        },
        {
          id: "tx-2",
          type: "outgoing",
          amount: 1250.00,
          date: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(),
          description: "Monthly Service Subscription",
          counterparty: "Software Solutions Inc."
        },
        {
          id: "tx-3",
          type: "incoming",
          amount: 8500.00,
          date: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(),
          description: "Invoice #INV-2023-003",
          counterparty: "Global Merchants LLC"
        },
        {
          id: "tx-4",
          type: "outgoing",
          amount: 3200.75,
          date: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(),
          description: "Supplier Payment",
          counterparty: "Parts & Materials Co."
        }
      ]);
      
      // Also fetch entities for backend compatibility
      await fetchEntities();
      
    } catch (err) {
      setError(err instanceof Error ? err.message : "An error occurred");
      console.error("Error fetching financial data:", err);
    } finally {
      setLoading(false);
    }
  };

  // Create a new entity
  const createEntity = async (e: React.FormEvent) => {
    e.preventDefault();
    
    try {
      setCreating(true);
      setError(null);
      
      const response = await fetch("/api/monite/entities", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(formData),
      });
      
      if (!response.ok) {
        const errorData = await response.json() as { message?: string };
        throw new Error(errorData.message ?? "Failed to create entity");
      }
      
      // Success - reset form and refresh entity list
      setFormData(initialFormData);
      setShowForm(false);
      void fetchEntities();
    } catch (err) {
      setError(err instanceof Error ? err.message : "An error occurred");
      console.error("Error creating entity:", err);
    } finally {
      setCreating(false);
    }
  };

  // Handle form input changes
  const handleInputChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>
  ) => {
    const { name, value } = e.target;
    
    if (name.includes(".")) {
      // Handle nested fields (address, organization, individual)
      const [parent, child] = name.split(".");
      
      if (parent === "address") {
        setFormData((prev) => ({
          ...prev,
          address: {
            ...prev.address,
            [child as keyof typeof prev.address]: value,
          },
        }));
      } else if (parent === "organization") {
        setFormData((prevData) => {
          if (prevData.organization) {
            return {
              ...prevData,
              organization: {
                ...prevData.organization,
                [child as keyof typeof prevData.organization]: value,
              },
            };
          }
          return prevData;
        });
      } else if (parent === "individual") {
        setFormData((prevData) => {
          if (prevData.individual) {
            return {
              ...prevData,
              individual: {
                ...prevData.individual,
                [child as keyof typeof prevData.individual]: value,
              },
            };
          }
          return prevData;
        });
      }
    } else {
      // Handle entity type changes
      if (name === "type") {
        if (value === "organization") {
          setFormData((prev) => ({
            ...prev,
            type: "organization" as const,
            organization: {
              legal_name: "",
              business_structure: "private_corporation",
            },
            individual: undefined,
          }) as EntityFormData);
        } else {
          setFormData((prev) => ({
            ...prev,
            type: "individual" as const,
            individual: {
              first_name: "",
              last_name: "",
            },
            organization: undefined,
          }) as EntityFormData);
        }
      } else {
        // Handle other top-level fields
        setFormData((prev) => ({
          ...prev,
          [name]: value,
        }));
      }
    }
  };

  // Fetch financial data on component mount and when session changes
  useEffect(() => {
    if (session) {
      void fetchFinancialData();
    }
  }, [session]);
  


  // Add entrance animations with GSAP
  useEffect(() => {
    if (!headerRef.current || !metricsRef.current || !insightsRef.current || !bankingRef.current) return;
    
    const tl = gsapAnimations.createTimeline();
    
    // Animate header
    tl.from(headerRef.current, {
      y: -20,
      opacity: 0,
      duration: 0.6,
      ease: gsapAnimations.easings.smooth
    });
    
    // Animate metrics section
    tl.from(metricsRef.current.children, {
      y: 30,
      opacity: 0,
      stagger: 0.1,
      duration: 0.5,
      ease: gsapAnimations.easings.bounce
    }, "-=0.3");
    
    // Animate insights section
    tl.from(insightsRef.current.children, {
      y: 30,
      opacity: 0,
      stagger: 0.1,
      duration: 0.4,
      ease: gsapAnimations.easings.smooth
    }, "-=0.2");
    
    // Animate banking section
    tl.from(bankingRef.current.children, {
      y: 20,
      opacity: 0,
      stagger: 0.08,
      duration: 0.3,
      ease: gsapAnimations.easings.smooth
    }, "-=0.2");
    
    return () => {
      tl.kill();
    };
  }, [financialSummary, bankConnections, upcomingPayments, recentTransactions]);

  return (
    <div className="container mx-auto px-4 py-8">
      <div ref={headerRef}>
        <h1 className="text-3xl font-bold mb-4">Financial Dashboard</h1>
        <p className="text-gray-600 mb-6">
          {session?.user?.email ? `Hello, ${session.user.email}!` : "Hello there!"} Here&apos;s an overview of your financial insights.
        </p>
        <div className="flex justify-end mb-4">
          <GlowButton 
            onClick={() => void fetchFinancialData()} 
            glowMode="pulse"
            glowColors={['#3B82F6', '#2563EB']}
            className="flex items-center gap-2 text-sm"
          >
            <RefreshCw size={16} />
            Refresh Financial Data
          </GlowButton>
        </div>
      </div>
      
      {/* Financial Metrics Section */}
      <div className="mb-8">
        <h2 className="text-xl font-semibold mb-4">Financial Overview</h2>
        <div ref={metricsRef} className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
          {/* Accounts Receivable */}
          <div className="bg-white p-6 rounded-lg shadow-sm border border-blue-100">
            <div className="flex items-center justify-between mb-4">
              <div className="flex items-center gap-2">
                <div className="bg-blue-100 p-2 rounded-full">
                  <ArrowDownRight size={20} className="text-blue-600" />
                </div>
                <h3 className="font-medium text-gray-700">Accounts Receivable</h3>
              </div>
            </div>
            <p className="text-2xl font-bold mb-2">${financialSummary.accountsReceivable.toLocaleString('en-US', {minimumFractionDigits: 2})}</p>
            <p className="text-sm text-gray-500">Amount owed to you</p>
            {financialSummary.recentIncome && (
              <div className="mt-3 pt-3 border-t border-gray-100">
                <p className="text-xs text-gray-600 mb-1">Recent Income:</p>
                <div className="flex items-center justify-between">
                  <p className="text-sm font-medium">{financialSummary.recentIncome.client}</p>
                  <p className="text-sm text-green-600 font-medium">+{financialSummary.recentIncome.amount.toLocaleString('en-US', {minimumFractionDigits: 2})}</p>
                </div>
                <p className="text-xs text-gray-500">{new Date(financialSummary.recentIncome.date).toLocaleDateString()}</p>
              </div>
            )}
          </div>

          {/* Accounts Payable */}
          <div className="bg-white p-6 rounded-lg shadow-sm border border-red-100">
            <div className="flex items-center justify-between mb-4">
              <div className="flex items-center gap-2">
                <div className="bg-red-100 p-2 rounded-full">
                  <ArrowUpRight size={20} className="text-red-600" />
                </div>
                <h3 className="font-medium text-gray-700">Accounts Payable</h3>
              </div>
            </div>
            <p className="text-2xl font-bold mb-2">{financialSummary.accountsPayable.toLocaleString('en-US', {minimumFractionDigits: 2})}</p>
            <p className="text-sm text-gray-500">Amount you owe</p>
            {financialSummary.nextPaymentDue && (
              <div className="mt-3 pt-3 border-t border-gray-100">
                <p className="text-xs text-gray-600 mb-1">Next Payment Due:</p>
                <div className="flex items-center justify-between">
                  <p className="text-sm font-medium">{financialSummary.nextPaymentDue.vendor}</p>
                  <p className="text-sm text-red-600 font-medium">-{financialSummary.nextPaymentDue.amount.toLocaleString('en-US', {minimumFractionDigits: 2})}</p>
                </div>
                <p className="text-xs text-gray-500">{new Date(financialSummary.nextPaymentDue.dueDate).toLocaleDateString()}</p>
              </div>
            )}
          </div>

          {/* Cash on Hand */}
          <div className="bg-white p-6 rounded-lg shadow-sm border border-green-100">
            <div className="flex items-center justify-between mb-4">
              <div className="flex items-center gap-2">
                <div className="bg-green-100 p-2 rounded-full">
                  <BanknoteIcon size={20} className="text-green-600" />
                </div>
                <h3 className="font-medium text-gray-700">Cash on Hand</h3>
              </div>
            </div>
            <p className="text-2xl font-bold mb-2">{financialSummary.cashOnHand.toLocaleString('en-US', {minimumFractionDigits: 2})}</p>
            <p className="text-sm text-gray-500">Available in your accounts</p>
            <div className="mt-3 pt-3 border-t border-gray-100">
              <div className="flex items-center justify-between">
                <p className="text-xs text-gray-600">Liquidity Ratio</p>
                <p className="text-xs font-medium">{(financialSummary.cashOnHand / (financialSummary.accountsPayable || 1)).toFixed(2)}</p>
              </div>
            </div>
          </div>

          {/* Working Capital */}
          <div className="bg-white p-6 rounded-lg shadow-sm border border-purple-100">
            <div className="flex items-center justify-between mb-4">
              <div className="flex items-center gap-2">
                <div className="bg-purple-100 p-2 rounded-full">
                  <LineChart size={20} className="text-purple-600" />
                </div>
                <h3 className="font-medium text-gray-700">Working Capital</h3>
              </div>
            </div>
            <p className="text-2xl font-bold mb-2">{financialSummary.workingCapital.toLocaleString('en-US', {minimumFractionDigits: 2})}</p>
            <p className="text-sm text-gray-500">Available operational funds</p>
            <div className="mt-3 pt-3 border-t border-gray-100">
              <div className="flex items-center justify-between">
                <p className="text-xs text-gray-600">Health Indicator</p>
                <span className="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-green-100 text-green-800">
                  Strong
                </span>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Banking & Transactions Section */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8">
        {/* Bank Connections */}
        <div className="lg:col-span-1">
          <div className="bg-white p-6 rounded-lg shadow-sm border border-gray-200 h-full">
            <h2 className="text-xl font-semibold mb-4">Connected Banks</h2>
            <div ref={bankingRef} className="space-y-3">
              {bankConnections.length === 0 ? (
                <div className="bg-blue-50 p-4 rounded-lg text-center">
                  <p className="text-blue-700 mb-2">No bank accounts connected yet</p>
                  <GlowButton
                    className="text-sm inline-flex items-center gap-1"
                    glowMode="pulse"
                    glowColors={['#3B82F6', '#2563EB']}
                  >
                    <BankIcon size={14} />
                    Connect Account
                  </GlowButton>
                </div>
              ) : (
                bankConnections.map(bank => (
                  <div key={bank.id} className="flex items-center gap-3 p-3 border border-gray-100 rounded-lg hover:bg-gray-50 transition-colors">
                    {bank.logo ? (
                      <Image
                        src={bank.logo}
                        alt={bank.name}
                        width={32}
                        height={32}
                        className="rounded-md"
                      />
                    ) : (
                      <div className="w-8 h-8 bg-gray-200 rounded-md flex items-center justify-center">
                        <BankIcon size={16} className="text-gray-500" />
                      </div>
                    )}
                    <div className="flex-grow">
                      <p className="font-medium">{bank.name}</p>
                      <p className="text-xs text-gray-500">{bank.accountType} •••• {bank.accountNumber.slice(-4)}</p>
                    </div>
                    <div className="text-right">
                      <p className="font-bold">${bank.balance.toLocaleString('en-US', {minimumFractionDigits: 2})}</p>
                      <span className={`inline-flex text-xs px-1.5 py-0.5 rounded-full ${bank.connected ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'}`}>
                        {bank.connected ? 'Active' : 'Pending'}
                      </span>
                    </div>
                  </div>
                ))
              )}
              {bankConnections.length > 0 && (
                <div className="text-center mt-4">
                  <Link href="#" className="text-blue-600 text-sm hover:underline flex items-center justify-center gap-1">
                    <ExternalLink size={14} /> Manage All Accounts
                  </Link>
                </div>
              )}
            </div>
          </div>
        </div>

        {/* Upcoming Payments & Recent Transactions */}
        <div className="lg:col-span-2">
          <div ref={insightsRef} className="grid grid-cols-1 gap-6 h-full">
            {/* Upcoming Payments */}
            <div className="bg-white p-6 rounded-lg shadow-sm border border-gray-200">
              <div className="flex items-center justify-between mb-4">
                <h2 className="text-xl font-semibold">Upcoming Payments</h2>
                <Link href="#" className="text-blue-600 text-sm hover:underline">
                  View All
                </Link>
              </div>
              <div className="overflow-x-auto">
                <table className="min-w-full divide-y divide-gray-200">
                  <thead>
                    <tr>
                      <th className="px-2 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Vendor</th>
                      <th className="px-2 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Amount</th>
                      <th className="px-2 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Due Date</th>
                      <th className="px-2 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                    </tr>
                  </thead>
                  <tbody className="bg-white divide-y divide-gray-200">
                    {upcomingPayments.length === 0 ? (
                      <tr>
                        <td colSpan={4} className="px-2 py-4 text-center text-sm text-gray-500">
                          No upcoming payments due
                        </td>
                      </tr>
                    ) : (
                      upcomingPayments.map(payment => (
                        <tr key={payment.id} className="hover:bg-gray-50">
                          <td className="px-2 py-3 whitespace-nowrap text-sm font-medium text-gray-900">
                            {payment.vendor}
                          </td>
                          <td className="px-2 py-3 whitespace-nowrap text-sm text-right font-medium text-red-600">
                            -${payment.amount.toLocaleString('en-US', {minimumFractionDigits: 2})}
                          </td>
                          <td className="px-2 py-3 whitespace-nowrap text-sm text-gray-500 flex items-center gap-1">
                            <Calendar size={14} />
                            {new Date(payment.dueDate).toLocaleDateString()}
                          </td>
                          <td className="px-2 py-3 whitespace-nowrap">
                            <span className={`inline-flex text-xs px-2 py-1 rounded-full ${payment.status === 'overdue' ? 'bg-red-100 text-red-800' : payment.status === 'due' ? 'bg-yellow-100 text-yellow-800' : payment.status === 'scheduled' ? 'bg-green-100 text-green-800' : 'bg-blue-100 text-blue-800'}`}>
                              {payment.status.charAt(0).toUpperCase() + payment.status.slice(1)}
                            </span>
                          </td>
                        </tr>
                      ))
                    )}
                  </tbody>
                </table>
              </div>
            </div>
            
            {/* Recent Transactions */}
            <div className="bg-white p-6 rounded-lg shadow-sm border border-gray-200">
              <div className="flex items-center justify-between mb-4">
                <h2 className="text-xl font-semibold">Recent Transactions</h2>
                <Link href="#" className="text-blue-600 text-sm hover:underline">
                  View All
                </Link>
              </div>
              <div className="overflow-x-auto">
                <table className="min-w-full divide-y divide-gray-200">
                  <thead>
                    <tr>
                      <th className="px-2 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Description</th>
                      <th className="px-2 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Counterparty</th>
                      <th className="px-2 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Amount</th>
                      <th className="px-2 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                    </tr>
                  </thead>
                  <tbody className="bg-white divide-y divide-gray-200">
                    {recentTransactions.length === 0 ? (
                      <tr>
                        <td colSpan={4} className="px-2 py-4 text-center text-sm text-gray-500">
                          No recent transactions
                        </td>
                      </tr>
                    ) : (
                      recentTransactions.map(transaction => (
                        <tr key={transaction.id} className="hover:bg-gray-50">
                          <td className="px-2 py-3 whitespace-nowrap text-sm font-medium text-gray-900">
                            {transaction.description}
                          </td>
                          <td className="px-2 py-3 whitespace-nowrap text-sm text-gray-500">
                            {transaction.counterparty}
                          </td>
                          <td className={`px-2 py-3 whitespace-nowrap text-sm text-right font-medium ${transaction.type === 'incoming' ? 'text-green-600' : 'text-red-600'}`}>
                            {transaction.type === 'incoming' ? '+' : '-'}{transaction.amount.toLocaleString('en-US', {minimumFractionDigits: 2})}
                          </td>
                          <td className="px-2 py-3 whitespace-nowrap text-sm text-gray-500 flex items-center gap-1">
                            <Clock size={14} />
                            {new Date(transaction.date).toLocaleDateString()}
                          </td>
                        </tr>
                      ))
                    )}
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Entity Management Section */}
      <div className="border-t border-gray-200 pt-8 mt-4">
        <h2 className="text-xl font-semibold mb-6">Entity Management</h2>
        
        {/* Entity Creation Button */}
        {!showForm && (
          <div className="mb-8">
            <GlowButton
              onClick={() => setShowForm(true)}
              className="flex items-center gap-2"
            >
              <PlusCircle size={18} />
              Create New Entity
            </GlowButton>
          </div>
        )}
      
      {/* Create Entity Form */}
      {showForm && (
        <div ref={formRef} className="bg-white rounded-lg shadow-md p-6 mb-8">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-semibold">Create New Entity</h2>
            <button
              onClick={() => setShowForm(false)}
              className="text-gray-500 hover:text-gray-700 flex items-center gap-1"
            >
              Cancel
            </button>
          </div>
          
          {error && (
            <div className="bg-red-50 text-red-600 p-3 rounded-md text-sm mb-4">
              {error}
            </div>
          )}
          
          <form onSubmit={createEntity}>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
              {/* Entity Type */}
              <div className="col-span-1">
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Entity Type*
                </label>
                <select
                  name="type"
                  value={formData.type}
                  onChange={handleInputChange}
                  className="w-full p-2 border border-gray-300 rounded"
                  required
                >
                  <option value="organization">Organization</option>
                  <option value="individual">Individual</option>
                </select>
              </div>
              
              {/* Email */}
              <div className="col-span-1">
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Email*
                </label>
                <input
                  type="email"
                  name="email"
                  value={formData.email}
                  onChange={handleInputChange}
                  className="w-full p-2 border border-gray-300 rounded"
                  required
                />
              </div>
            </div>
            
            {/* Organization or Individual fields */}
            {formData.type === "organization" ? (
              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Legal Name*
                </label>
                <input
                  type="text"
                  name="organization.legal_name"
                  value={formData.organization?.legal_name ?? ""}
                  onChange={handleInputChange}
                  className="w-full p-2 border border-gray-300 rounded"
                  required
                />
              </div>
            ) : (
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    First Name*
                  </label>
                  <input
                    type="text"
                    name="individual.first_name"
                    value={formData.individual?.first_name ?? ""}
                    onChange={handleInputChange}
                    className="w-full p-2 border border-gray-300 rounded"
                    required
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Last Name*
                  </label>
                  <input
                    type="text"
                    name="individual.last_name"
                    value={formData.individual?.last_name ?? ""}
                    onChange={handleInputChange}
                    className="w-full p-2 border border-gray-300 rounded"
                    required
                  />
                </div>
              </div>
            )}
            
            {/* Tax ID */}
            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Tax ID*
              </label>
              <input
                type="text"
                name="tax_id"
                value={formData.tax_id}
                onChange={handleInputChange}
                className="w-full p-2 border border-gray-300 rounded"
                required
              />
            </div>
            
            {/* Address Fields */}
            <div className="mb-4">
              <h3 className="text-md font-medium mb-2">Address</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Address Line*
                  </label>
                  <input
                    type="text"
                    name="address.line1"
                    value={formData.address.line1}
                    onChange={handleInputChange}
                    className="w-full p-2 border border-gray-300 rounded"
                    required
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    City*
                  </label>
                  <input
                    type="text"
                    name="address.city"
                    value={formData.address.city}
                    onChange={handleInputChange}
                    className="w-full p-2 border border-gray-300 rounded"
                    required
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    State/Province
                  </label>
                  <input
                    type="text"
                    name="address.state"
                    value={formData.address.state}
                    onChange={handleInputChange}
                    className="w-full p-2 border border-gray-300 rounded"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Postal Code*
                  </label>
                  <input
                    type="text"
                    name="address.postal_code"
                    value={formData.address.postal_code}
                    onChange={handleInputChange}
                    className="w-full p-2 border border-gray-300 rounded"
                    required
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Country*
                  </label>
                  <input
                    type="text"
                    name="address.country"
                    value={formData.address.country}
                    onChange={handleInputChange}
                    className="w-full p-2 border border-gray-300 rounded"
                    required
                  />
                </div>
              </div>
            </div>
            
            <div className="flex justify-end">
              <GlowButton
                type="submit"
                disabled={creating}
                className="flex items-center gap-2"
              >
                {creating ? "Creating..." : "Create Entity"}
              </GlowButton>
            </div>
          </form>
        </div>
      )}
      
      {/* Entities List */}
      <div>
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-xl font-semibold">Entities</h2>
          {entities.length > 0 && (
            <GlowButton 
              onClick={() => void fetchEntities()} 
              glowMode="pulse"
              glowColors={['#3B82F6', '#2563EB']}
              className="flex items-center gap-2 text-sm"
            >
              <RefreshCw size={16} />
              Refresh
            </GlowButton>
          )}
        </div>
        
        {loading ? (
          <div className="animate-pulse flex flex-col gap-4">
            {[1, 2, 3].map((n) => (
              <div key={n} className="bg-gray-100 h-24 rounded-lg">&nbsp;</div>
            ))}
          </div>
        ) : error && !showForm ? (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-lg mb-4 flex items-center gap-2">
            <AlertCircle size={20} />
            <p>{error}</p>
          </div>
        ) : entities.length === 0 ? (
          <div className="bg-blue-50 p-6 rounded-lg border border-blue-100 text-center">
            <p className="text-blue-800 mb-4">No entities found. Create your first entity to get started!</p>
            <GlowButton
              onClick={() => setShowForm(true)}
              className="inline-flex items-center gap-2"
            >
              <PlusCircle size={18} />
              Create Your First Entity
            </GlowButton>
          </div>
        ) : (
          <div ref={entityListRef} className="space-y-4">
            {entities.map((entity) => (
              <div 
                key={entity.id} 
                className="border border-gray-200 p-6 rounded-lg shadow-sm bg-white hover:shadow-md transition-shadow"
              >
                <h3 className="font-bold text-lg mb-2">
                  {entity.type === "organization" && entity.organization
                    ? entity.organization.legal_name
                    : entity.type === "individual" && entity.individual
                    ? `${entity.individual.first_name} ${entity.individual.last_name}`
                    : "-"}
                </h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-2 text-sm mb-3">
                  <p className="flex items-center gap-1">
                    <span className="text-gray-500">Type:</span> 
                    <span className="capitalize">{entity.type}</span>
                  </p>
                  <p className="flex items-center gap-1">
                    <span className="text-gray-500">Email:</span> 
                    <span>{entity.email}</span>
                  </p>
                  <p className="flex items-center gap-1">
                    <span className="text-gray-500">Tax ID:</span> 
                    <span>{entity.tax_id}</span>
                  </p>
                  <p className="flex items-center gap-1">
                    <span className="text-gray-500">Created:</span> 
                    <span>{new Date(entity.created_at).toLocaleDateString()}</span>
                  </p>
                </div>
                <div className="bg-gray-50 p-3 rounded text-sm">
                  <p className="text-gray-600">
                    <span className="font-medium">Address:</span> {entity.address.line1}, {entity.address.city},{" "}
                    {entity.address.state ?? ""} {entity.address.postal_code},{" "}
                    {entity.address.country}
                  </p>
                </div>
                <div className="mt-4 pt-3 border-t border-gray-100 flex justify-between">
                  <div className="text-xs text-gray-500">
                    ID: {entity.id.substring(0, 8)}...
                  </div>
                  <div className="flex gap-2">
                    <GlowButton
                      onClick={() => void fetchEntities()}
                      glowMode="static"
                      glowColors={['#E5E7EB', '#D1D5DB', '#9CA3AF']}
                      className="flex items-center gap-1 text-xs"
                    >
                      <RefreshCw size={14} />
                      Refresh
                    </GlowButton>
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
}
